Justin 

import pexpect
import time

#-Define variables for SSH
ssh_ip_address = '192.168.56.101'
ssh_username = 'cisco' # Username - Change it to prne if there are any issues
ssh_password = 'cisco123!'  #-Login password
ssh_password_enable = 'class123!'  #-Enable password
ssh_new_hostname = 'R1' #New Hostname

# Configuration information for loopbsck interface and OSPF
loopback_ip = "10.10.10.23" # IP address for loopback interface
loopback_mask = "255.255.255.255" # Subnet mask for loopback interface
ospf_area = "0" #OSPF area ID

# Starting the SSH session
def configure_router():
    try:
        # Create/Start an SSH session
        print("[*] Starting SSH session...")
        session = pexpect.spawn(
            f'ssh -o "StrictHostKeyChecking=no" {ssh_username}@{ssh_ip_address}',
            encoding='utf-8', 
            timeout=20
        )
        # Save SSH session interactions for troubleshooting 
        session.logfile = open("ssh_debug.log", "w")  # Logs interactions

        # Login to the router with the provided password above
        result = session.expect(['Password:', pexpect.TIMEOUT, pexpect.EOF]) # Wait for the password prompt
        if result != 0:
            print('[!] FAILURE: Unable to create SSH session.') # Error if password prompt is not received
            return
        session.sendline(ssh_password) # Send the SSH password
        result = session.expect(['>', pexpect.TIMEOUT, pexpect.EOF]) #Wait for the EXEC mode prompt
        if result != 0:
            print('[!] FAILURE: Invalid login credentials.') # Error if login credentials are wrong
            return
        print("[+] Successfully logged in.")

        # Entering enable mode
        print("[*] Entering enable mode...")
        session.sendline('enable') # Send the 'enable' command
        result = session.expect(['Password:', pexpect.TIMEOUT, pexpect.EOF]) # Wait for the enable password prompt
        if result != 0:
            print('[!] FAILURE: Failed to enter enable mode.') # Error if enable mode cant be accessed
            return

        # Provide enable password to access privileged EXEC commands
        session.sendline(ssh_password_enable)
        result = session.expect([r'.*#', pexpect.TIMEOUT, pexpect.EOF])  #-Expect prompt after enable
        if result != 0:
            print('[!] FAILURE: Invalid enable password or unexpected router response.') # Error is password is wrong
            print(f'[DEBUG] Router response: {session.before.strip()}')  #-Print router's output for debugging
            return
        print("[+] Successfully entered enable mode.")
        
        # Enter global configuration mode to start configuring the router
        print("[*] Entering global configuration mode...") #-Enter global configuration mode
        session.sendline('configure terminal') # Enter Config mode
        result = session.expect([r'\(config\)#', pexpect.TIMEOUT, pexpect.EOF]) # Wait for config prompt
        if result != 0:
            print('[!] FAILURE: Could not enter config mode.') # Error if not in config mode
            return
        print("[+] Successfully entered global configuration mode.")
        
        # Changing the routers hostname to the specified new hostname
        print(f"[*] Changing hostname to {ssh_new_hostname}...") #-Changing Hostname
        session.sendline(f'hostname {ssh_new_hostname}')
        result = session.expect([rf'{ssh_new_hostname}\(config\)#', pexpect.TIMEOUT, pexpect.EOF]) #Waiting for prompt
        if result != 0:
            print('[!] FAILURE: Could not set hostname.') #Error if hostname cant be accessed
            return
        print("[+] Hostname changed successfully.")
        
        # Configuring Loopback interface with specified IP address and subnet mask
        print("[*] Configuring loopback interface...") #-Configure loopback interface
        session.sendline('interface loopback 0')
        result = session.expect([rf'{ssh_new_hostname}\(config-if\)#', pexpect.TIMEOUT, pexpect.EOF]) # Waiting for prompt
        if result != 0:
            print('[!] FAILURE: Could not enter interface config.') #Error if cant be accessed
            return

        session.sendline(f'ip address {loopback_ip} {loopback_mask}') # Assign IP Address tp the loopback interface
        result = session.expect([rf'{ssh_new_hostname}\(config-if\)#', pexpect.TIMEOUT, pexpect.EOF]) # Wait for prompt
        if result != 0:
            print('[!] FAILURE: Could not configure IP address.') # Error if IP address is  not set
            return

        session.sendline('no shutdown') # Ensure the loopback interface is active
        result = session.expect([rf'{ssh_new_hostname}\(config-if\)#', pexpect.TIMEOUT, pexpect.EOF])
        if result != 0:
            print('[!] FAILURE: Could not enable interface.') # Error if interface cant be enabled
            return

        session.sendline('exit') #-Exit interface mode
        session.expect([rf'{ssh_new_hostname}\(config\)#']) #waiting for config mode prompt
        print("[+] Loopback interface configured successfully.")

        # Configure OSPF
        print("[*] Configuring OSPF...") #-Configure OSPF
        session.sendline('router ospf 1') # Entering OSPF router config mode
        result = session.expect([rf'{ssh_new_hostname}\(config-router\)#', pexpect.TIMEOUT, pexpect.EOF])
        if result != 0:
            print('[!] FAILURE: Could not enter OSPF config mode.') # Error if OSPF cant be configured
            return

        session.sendline(f'network {loopback_ip} 0.0.0.0 area {ospf_area}') # Adding loopback network to OSPF
        result = session.expect([rf'{ssh_new_hostname}\(config-router\)#', pexpect.TIMEOUT, pexpect.EOF]) #Waiting for prompt
        if result != 0:
            print('[!] FAILURE: Could not configure OSPF network.') #Error if OSPF connection cant be set
            return

        
        session.sendline('exit') #-Exit OSPF configuration mode mode
        session.expect([rf'{ssh_new_hostname}\(config\)#']) # Waiting for config mode prompt
        print("[+] OSPF configured successfully.")
        
        #Save the current router configuration
        print("[*] Saving configuration...") 
        session.sendline('write memory') # Saving configuartion...
        result = session.expect([rf'{ssh_new_hostname}\(config\)#', pexpect.TIMEOUT, pexpect.EOF])
        if result != 0:
            print('[!] FAILURE: Could not save configuration.') # Error if config cant be saved
            return
        print("[+] Configuration saved successfully.")
        
        # Exiting configuration mode
        session.sendline('exit') #-Exiting to privileged EXEC mode
        session.expect([rf'{ssh_new_hostname}#', pexpect.TIMEOUT, pexpect.EOF]) # Wait for privileged EXEC prompt

        time.sleep(5)  # Wait for OSPF to propagate - I set it at 5 secomds because it give the OSPF a little time to start up

        print("[*] Displaying OSPF configuration...")  # Displaying OSPF config on the routert
        session.sendline('show ip ospf') # Running the OSPF display command

        ospf_output = ""
        while True:
            try:
                result = session.expect([r'--More--', rf'{ssh_new_hostname}#', pexpect.TIMEOUT, pexpect.EOF], timeout=30)
                ospf_output += session.before.strip()  # Append the current output

                if result == 0:  # If '-- more --' is detected, send space to get the next page
                    session.send(" ")  
                elif result == 1:  # If the command completes , it will the break
                    break
            except pexpect.TIMEOUT:
                print("[!] TIMEOUT: The command took too long to respond.")
                break
            except Exception as e:
                print(f"[!] ERROR: {e}")
                break
        # Print the OSPF config output
        print("[+] OSPF Configuration:")
        print(ospf_output)

        #-Close session
        session.sendline('exit')
        session.close()
        print('[+] Configuration completed successfully.')

#Handles exceptions for timeouts, session closure, or other errors
    except pexpect.exceptions.TIMEOUT:
        print('[!] TIMEOUT: Operation took too long.')
    except pexpect.exceptions.EOF:
        print('[!] EOF: SSH session unexpectedly closed.')
    except Exception as e:
        print(f'[!] ERROR: {e}')

# The Main function to run the session 
if __name__ == '__main__':
    configure_router()
