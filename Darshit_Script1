import pexpect
import time

# Define variables
router_ip = '192.168.56.101'
username = 'prne'
password = 'cisco123!'
enable_password = 'class123!'
hostname = 'Router1'

# Configuration commands
loopback_address = "10.10.10.23"
loopback_subnet = "255.255.255.255"
ospf_area_id = "0"
main_interface_ip = "192.168.56.101"
main_interface_subnet = "255.255.255.0"
main_interface_name = "GigabitEthernet1"

def send_command(session, command, expect="#", delay=1):
    session.sendline(command)
    time.sleep(delay)
    session.expect(expect)
    return session.before

def setup_router():
    try:
        # Establish an SSH connection
        print("[*] Connecting to the router...")
        session = pexpect.spawn(f"ssh -o StrictHostKeyChecking=no {username}@{router_ip}", timeout=20, encoding="utf-8")

        # Login to the router
        session.expect("Password:")
        session.sendline(password)
        session.expect(">")
        print("[+] Connected to the router.")

        # Enter enable mode
        print("[*] Switching to enable mode...")
        session.sendline("enable")
        session.expect("Password:")
        session.sendline(enable_password)
        session.expect("#")
        print("[+] Enable mode activated.")

        # Enter configuration mode
        print("[*] Entering configuration mode...")
        session.sendline("configure terminal")
        session.expect("(config)#")

        # Update hostname
        print(f"[*] Setting hostname to {hostname}...")
        session.sendline(f"hostname {hostname}")
        session.expect(f"{hostname}\(config\)#")

        # Configure loopback interface
        print("[*] Setting up loopback interface...")
        session.sendline("interface loopback 0")
        session.expect(f"{hostname}\(config-if\)#")
        session.sendline(f"ip address {loopback_address} {loopback_subnet}")
        session.expect(f"{hostname}\(config-if\)#")
        session.sendline("no shutdown")
        session.expect(f"{hostname}\(config-if\)#")

        # Configure primary interface
        print(f"[*] Configuring {main_interface_name}...")
        session.sendline(f"interface {main_interface_name}")
        session.expect(f"{hostname}\(config-if\)#")
        session.sendline(f"ip address {main_interface_ip} {main_interface_subnet}")
        session.expect(f"{hostname}\(config-if\)#")
        session.sendline("no shutdown")
        session.expect(f"{hostname}\(config-if\)#")

        # Set up OSPF
        print("[*] Enabling OSPF routing protocol...")
        session.sendline("router ospf 1")
        session.expect(f"{hostname}\(config-router\)#")
        session.sendline(f"network {loopback_address} 0.0.0.0 area {ospf_area_id}")
        session.expect(f"{hostname}\(config-router\)#")
        session.sendline(f"network {main_interface_ip} 0.0.0.255 area {ospf_area_id}")
        session.expect(f"{hostname}\(config-router\)#")

        # Save the configuration
        print("[*] Saving current configuration...")
        session.sendline("write memory")
        session.expect(f"{hostname}#")

        # Verify OSPF settings
        print("[*] Verifying OSPF configuration...")
        session.sendline("show ip ospf")
        ospf_output = ""
        while True:
            try:
                index = session.expect(["--More--", f"{hostname}#"], timeout=10)
                ospf_output += session.before
                if index == 0:
                    session.send(" ")
                else:
                    break
            except pexpect.TIMEOUT:
                break

        print("[+] OSPF Details:")
        print(ospf_output)

        # Close the session
        session.sendline("exit")
        session.close()
        print("[+] Setup completed successfully.")

    except pexpect.exceptions.TIMEOUT:
        print("[!] Operation timed out.")
    except pexpect.exceptions.EOF:
        print("[!] Unexpected EOF encountered.")
    except Exception as error:
        print(f"[!] General Error: {error}")

if __name__ == "__main__":
    setup_router()
